from pathlib import Path
import multiprocessing
import os

# Load the configuration file
configfile: "config.yaml"

# Extract global variables from the config
DBDIR = config["database_dir"]
INFILES = config["sample"]  # This can be a list of files
OUTDIR = config["output_dir"]

# Define database paths
PROTDB = f"{DBDIR}/VMR_latest/mmseqs_proteins/mmseqs_proteins"
GENOMEDB = f"{DBDIR}/VMR_latest/mmseqs_genomes/mmseqs_genomes"
PROFDB = f"{DBDIR}/VMR_latest/mmseqs_pprofiles/mmseqs_pprofiles"
INDIR = os.path.dirname(INFILES)

# Function to dynamically generate output files
def generate_outputs(wildcards):
    return f"{OUTDIR}/{wildcards.sample}_genome.m8"


# Function to dynamically generate input files
def generate_inputs(wildcards):
    directory_ = os.path.dirname(INFILES)
    file_name, file_extension = os.path.splitext(os.path.basename(INFILES))
    return os.path.join(directory_, f"{wildcards.sample}{file_extension}")


# Rule to define final output
rule all:
    input:
        expand(f"{OUTDIR}/nuc/{{sample}}_{{ext}}_genome.m8",
        sample=[os.path.splitext(os.path.basename(INFILES))[0]],
        ext=[os.path.basename(INFILES).split(".")[-1]]),
        expand(f"{OUTDIR}/prot/{{sample}}_{{ext}}_prot_lca.tsv",
        sample=[os.path.splitext(os.path.basename(INFILES))[0]],
        ext=[os.path.basename(INFILES).split(".")[-1]]),
        expand(f"{OUTDIR}/prof/{{sample}}_{{ext}}_prof.m8",
        sample=[os.path.splitext(os.path.basename(INFILES))[0]],
        ext=[os.path.basename(INFILES).split(".")[-1]]),
        expand(f"{OUTDIR}/results/{{sample}}_{{ext}}.csv",
        sample=[os.path.splitext(os.path.basename(INFILES))[0]],
        ext=[os.path.basename(INFILES).split(".")[-1]]),
        expand(f"{OUTDIR}/results/{{sample}}_{{ext}}_formatted_results.csv",
        sample=[os.path.splitext(os.path.basename(INFILES))[0]],
        ext=[os.path.basename(INFILES).split(".")[-1]])
        


# Nucelotide level annotations
rule annot_nuc:
    input:
        f"{INDIR}/{{sample}}.{{ext}}"
    output:
        out=f"{OUTDIR}/nuc/{{sample}}_{{ext}}_genome.m8",
    log:
        f"{OUTDIR}/logs/{{sample}}_{{ext}}_annot_nuc.log"
    params:
        db=GENOMEDB,
         tmp=temp(f"{OUTDIR}/tmp"),
    threads: int(workflow.cores * 0.75)
    shell:
        """
        mmseqs easy-search {input} {params.db} {output.out} {params.tmp} --search-type 3 \
        --format-output query,target,fident,qlen,tlen,alnlen,mismatch,gapopen,qstart,qend,tstart,tend,evalue,bits,taxid,taxname,taxlineage >> {log}
        """

# Protein level annotations
rule annot_prot:
    input:
        f"{INDIR}/{{sample}}.{{ext}}"
    output:
        tsv=f"{OUTDIR}/prot/{{sample}}_{{ext}}_prot_lca.tsv"
    log:
        f"{OUTDIR}/logs/{{sample}}_{{ext}}_annot_prot.log"
    params:
        out=f"{OUTDIR}/prot/{{sample}}_{{ext}}_prot",
        db=PROTDB,
         tmp=temp(f"{OUTDIR}/tmp"),
    threads: int(workflow.cores * 0.75)
    shell:
        """ 
        mmseqs easy-taxonomy {input} {params.db} {params.out} {params.tmp} -e 1e-5 -s 7 --blacklist "" --tax-lineage 1 >> {log}
        """

# Profile level annotations
rule annot_prof:
    input:
        f"{INDIR}/{{sample}}.{{ext}}"
    output:
        f"{OUTDIR}/prof/{{sample}}_{{ext}}_prof.m8"
    log:
        f"{OUTDIR}/logs/{{sample}}_{{ext}}_annot_prof.log"
    params:
        db=PROFDB,
        tmp=temp(f"{OUTDIR}/tmp"),
    threads: int(workflow.cores * 0.75)
    shell:
        """ 
        mmseqs easy-search {input} {params.db} {output} {params.tmp} --search-type 2 \
        --format-output query,target,fident,pident,qlen,tlen,alnlen,mismatch,gapopen,qstart,qend,tstart,tend,evalue,bits,taxid,taxname,taxlineage >> {log}
        
        """

rule summarize:
    input:
        DATADIR=DBDIR,
        PROF = f"{OUTDIR}/prof/{{sample}}_{{ext}}_prof.m8",
        PROT = f"{OUTDIR}/prot/{{sample}}_{{ext}}_prot_lca.tsv",
        NUC = f"{OUTDIR}/nuc/{{sample}}_{{ext}}_genome.m8",
        FASTA = f"{INDIR}/{{sample}}.{{ext}}",

    output:
        f"{OUTDIR}/results/{{sample}}_{{ext}}.csv"
    log:
        f"{OUTDIR}/logs/{{sample}}_{{ext}}_summarize.log"

    threads: int(workflow.cores * 0.75)
    shell:
        """ 
        postprocess.py {input.DATADIR} {input.NUC} {input.PROT} {input.PROF} {input.FASTA} {output} >> {log}
        
        """

rule ictv_results:
    input:
        DATADIR=DBDIR,
        INFILE=f"{OUTDIR}/results/{{sample}}_{{ext}}.csv"
    output:
        f"{OUTDIR}/results/{{sample}}_{{ext}}_formatted_results.csv"
    log:
        f"{OUTDIR}/logs/{{sample}}_{{ext}}_ictv_out.log"
    shell:
        """
        ictv_out.py {input.DATADIR} {input.INFILE} {output} >> {log}
        """
# mmseqs easy-taxonomy {input} {params.db} {params.out} {params.tmp} -e 1e-5 -s 7 --blacklist "" --tax-lineage 1 --search-type 3 >> {log}